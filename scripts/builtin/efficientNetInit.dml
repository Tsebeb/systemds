#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Trains a partial Efficient-Net B0 model
# This script trains the top and bottom part of the Efficient-Net B0
# The original Efficient-Net B0 has the following Layers
#----------------------------------------------------------------
#    Layers                    Dimension      Filters       Nr Repeats
#----------------------------------------------------------------
# 1. Conv3x3                    224x224         32          1
# 2. MBConv1, k3x3              112x112         16          1
# 3. MBConv6, k3x3               56x 56         24          2
# 4. MBConv6, k5x5               28x 28         40          2
# 5. MBConv6, k3x3               14x 14         80          3
# 6. MBConv6, k5x5               14x 14         112         3
# 7. MBConv6, k5x5                7x  7         192         4
# 8. MBConv6, k3x3                7x  7         320         1
# 9. Conv1x1 & Pooling & FC       7x  7         1280        1
#----------------------------------------------------------------
# In this partial implementation we implement the layers number 1, 2 and the prediction layer 9


# NAME                  MEANING
# -------------------------------------------------------------------------------------------
# InputChannels         Number of Channels for the flattened input the first convolution depends on this
# NumberOutputClasses   Number of Output Classes for Classification
# seed                  Seed for the random generation of the weights and Biases
# -------------------------------------------------------------------------------------------
#


# Imports
source("nn/layers/affine.dml") as affine
source("nn/layers/conv2d_builtin.dml") as conv2d
source("nn/layers/conv2d_depthwise.dml") as depthwise_conv2d
source("nn/layers/batch_norm2d.dml") as batchnorm
source("nn/optim/adam.dml") as adam
source("nn/optim/sgd.dml") as sgd
source("nn/layers/mbconv.dml") as mbconv

efficientNetInit = function(int InputChannels, int NumberOutputClasses, int seed = -1)
    return(list[unknown] model)
{
    # Layer 1
    [CW_stem, Cb_stem] = conv2d::init(32, InputChannels, 3, 3, seed)
    seed = ifelse(seed==-1, -1, seed + 1);
    [Gamma_stem, Beta_stem, EmaMean_stem, EmaVar_stem] = batchnorm::init(32)

    # Layer 2
    [mb_parameters] = mbconv::init(32, 16, 3, 3, 1, 0.25, seed)
    seed = ifelse(seed==-1, -1, seed + 1);

    # Layer 9
    [CW_top, Cb_top] = conv2d::init(1280, 16, 1, 1, seed)
    seed = ifelse(seed==-1, -1, seed + 1);
    [Gamma_top, Beta_top, EmaMean_top, EmaVar_top] = batchnorm::init(1280)
    [DW_top, Db_top] = affine::init(1280, NumberOutputClasses, seed)

    model = list(CW_stem, Cb_stem, Gamma_stem, Beta_stem, EmaMean_stem, EmaVar_stem,
                as.matrix(mb_parameters[1]),
                as.matrix(mb_parameters[2]),
                as.matrix(mb_parameters[3]),
                as.matrix(mb_parameters[4]),
                as.matrix(mb_parameters[5]),
                as.matrix(mb_parameters[6]),
                as.matrix(mb_parameters[7]),
                as.matrix(mb_parameters[8]),
                as.matrix(mb_parameters[9]),
                as.matrix(mb_parameters[10]),
                as.matrix(mb_parameters[11]),
                as.matrix(mb_parameters[12]),
                as.matrix(mb_parameters[13]),
                as.matrix(mb_parameters[14]),
                as.matrix(mb_parameters[15]),
                as.matrix(mb_parameters[16]),
                as.matrix(mb_parameters[17]),
                as.matrix(mb_parameters[18]),
                as.matrix(mb_parameters[19]),
                as.matrix(mb_parameters[20]),
                as.matrix(mb_parameters[21]),
                as.matrix(mb_parameters[22]),
                CW_top, Cb_top, Gamma_top, Beta_top, EmaMean_top, EmaVar_top, DW_top, Db_top)
}
